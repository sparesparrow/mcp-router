name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for lint script
        id: check_lint
        run: |
          if grep -q '"lint":' package.json; then
            echo "has_lint=true" >> $GITHUB_OUTPUT
          else
            echo "has_lint=false" >> $GITHUB_OUTPUT
            echo "Lint script not found in package.json"
          fi
      
      - name: Lint
        if: steps.check_lint.outputs.has_lint == 'true'
        run: npm run lint
        
      - name: Format check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,scss}" --ignore-path .prettierignore
        continue-on-error: true

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'packages/backend/requirements.txt'
      
      - name: Install Python dependencies
        run: |
          cd packages/backend
          pip install -r requirements.txt
      
      - name: Install Node dependencies
        run: npm ci
      
      - name: Cache build outputs
        uses: actions/cache@v3
        with:
          path: |
            packages/*/dist
            packages/*/build
            packages/frontend/build
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Build
        run: npm run build
      
      - name: Node.js Unit tests
        run: npm test
        continue-on-error: true
      
      - name: Python Unit tests
        run: |
          cd packages/backend
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            packages/*/build
            packages/frontend/build

  containerized-integration-tests:
    name: Containerized Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Install dependencies
        run: |
          npm ci
          cd integration-tests && npm install
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
        continue-on-error: true
      
      - name: Check if containerized test script exists
        id: check_script
        run: |
          if [ -f "integration-tests/scripts/run-containerized-tests.sh" ]; then
            echo "has_script=true" >> $GITHUB_OUTPUT
          else
            echo "has_script=false" >> $GITHUB_OUTPUT
            echo "Containerized test script not found, skipping"
          fi
      
      - name: Run containerized integration tests
        if: steps.check_script.outputs.has_script == 'true'
        run: |
          cd integration-tests
          npm run test:container
        continue-on-error: true
      
      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-artifacts
          path: |
            test_coverage/
            test_logs/
            screenshots/
        if: always()

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
        continue-on-error: true
      
      - name: Check for k6 tests
        id: check_k6
        run: |
          if [ -f "tests/performance/api-performance.js" ]; then
            echo "has_k6=true" >> $GITHUB_OUTPUT
          else
            echo "has_k6=false" >> $GITHUB_OUTPUT
            echo "k6 tests not found, skipping API performance tests"
          fi
      
      - name: Install k6
        if: steps.check_k6.outputs.has_k6 == 'true'
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.42.0/k6-v0.42.0-linux-amd64.tar.gz | tar xvz
          sudo cp k6-v0.42.0-linux-amd64/k6 /usr/local/bin
        continue-on-error: true
      
      - name: Start backend for API testing
        if: steps.check_k6.outputs.has_k6 == 'true'
        run: npm run start:backend &
        continue-on-error: true
        
      - name: Wait for backend to start
        if: steps.check_k6.outputs.has_k6 == 'true'
        run: |
          echo "Waiting for backend to start..."
          timeout 60 bash -c 'until curl -s http://localhost:3001/health; do sleep 2; done' || echo "Backend not available"
        continue-on-error: true
      
      - name: Run API performance tests
        if: steps.check_k6.outputs.has_k6 == 'true'
        run: k6 run tests/performance/api-performance.js
        continue-on-error: true
      
      - name: Check for Lighthouse config
        id: check_lighthouse
        run: |
          if [ -f "lighthouserc.js" ]; then
            echo "has_lighthouse=true" >> $GITHUB_OUTPUT
          else
            echo "has_lighthouse=false" >> $GITHUB_OUTPUT
            echo "Lighthouse config not found, skipping"
          fi
      
      - name: Start frontend for Lighthouse tests
        if: steps.check_lighthouse.outputs.has_lighthouse == 'true'
        run: npm run start:frontend &
        continue-on-error: true
        
      - name: Wait for frontend to start
        if: steps.check_lighthouse.outputs.has_lighthouse == 'true'
        run: |
          echo "Waiting for frontend to start..."
          timeout 60 bash -c 'until curl -s http://localhost:3000; do sleep 2; done' || echo "Frontend not available"
        continue-on-error: true
      
      - name: Install Lighthouse CI
        if: steps.check_lighthouse.outputs.has_lighthouse == 'true'
        run: npm install -g @lhci/cli
        continue-on-error: true
      
      - name: Run Lighthouse CI
        if: steps.check_lighthouse.outputs.has_lighthouse == 'true'
        run: lhci autorun
        continue-on-error: true
      
      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: |
            k6-results/
            lighthouse-results/
            integration-tests/performance-reports/
        if: always()

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [containerized-integration-tests, performance-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./packages/frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max